{"version":3,"sources":["../src/constants.ts","../src/context/SpotifyConnect.context.tsx","../src/hooks/useCurrentlyPlaying.ts"],"sourcesContent":["import { TCurrentlyPlayingTrack, TParsedCurrentlyPlayingTrack } from './types';\n\nexport const currentlyPlayingEndpoint = `https://api.spotify.com/v1/me/player/currently-playing`;\nexport const apiTokenEndpoint = `https://accounts.spotify.com/api/token`;\nexport const queryRefetchInterval = 10*1000;\n\nexport const parseCurrentlyPlayingTrack = (data: TCurrentlyPlayingTrack | undefined): TParsedCurrentlyPlayingTrack => {\n  if (!data || !data.item) {\n    return {\n      track: null,\n      timestamp: null,\n      is_playing: false,\n    };\n  }\n\n  const { item, progress_ms, timestamp } = data;\n\n  return {\n    track: {\n      id: item.id,\n      name: item.name,\n      artist: item.artists,\n      album: item.album.name,\n      image: item.album.images[0].url,\n      duration: item.duration_ms,\n      progress: progress_ms,\n      uri: item.uri,\n    },\n    timestamp,\n    is_playing: true,\n  };\n};\n","\"use client\";\n\nimport { createContext } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { TSpotifyConnectContext } from \"../types\";\n\nexport const SpotifyConnectContext = createContext<TSpotifyConnectContext>({\n  clientId: \"\",\n  clientSecret: \"\",\n  refreshToken: \"\",\n});\n\nexport const SpotifyConnectContextProvider = ({\n  children,\n  clientId,\n  clientSecret,\n  refreshToken,\n}: {\n  children: React.ReactNode;\n} & TSpotifyConnectContext) => {\n  const queryClient = new QueryClient();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SpotifyConnectContext.Provider\n        value={{\n          clientId,\n          clientSecret,\n          refreshToken,\n        }}\n      >\n        {children}\n      </SpotifyConnectContext.Provider>\n    </QueryClientProvider>\n  );\n};\n","\"use client\";\n\nimport * as querystring from \"querystring\";\nimport { Context, useCallback, useContext, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport {\n  apiTokenEndpoint,\n  currentlyPlayingEndpoint,\n  queryRefetchInterval,\n} from \"../../src/constants\";\nimport { SpotifyConnectContext } from \"../context/SpotifyConnect.context\";\nimport { TCurrentlyPlayingTrack } from \"../types\";\n\nconst useContextWithError = <T>(context: Context<T>) => {\n  const contextValue = useContext<T>(context);\n\n  if (!contextValue) {\n    throw new Error(\n      `useCurrentlyPlaying must be used within a SpotifyConnectContextProvider`\n    );\n  }\n\n  return contextValue;\n};\n\nexport const useCurrentlyPlaying = (refetchInterval = queryRefetchInterval) => {\n  const { clientId, clientSecret, refreshToken } = useContextWithError(\n    SpotifyConnectContext\n  );\n  const [accessToken, setAccessToken] = useState<string>();\n\n  const basic = Buffer.from(`${clientId}:${clientSecret}`).toString(\"base64\");\n\n  const getAccessToken = useCallback(async () => {\n    const response = await fetch(apiTokenEndpoint, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Basic ${basic}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body: querystring.stringify({\n        grant_type: \"refresh_token\",\n        refresh_token: refreshToken,\n      }),\n    });\n\n    if (response.status === 401) {\n      throw new Error(\"Invalid refresh token\");\n    }\n\n    return response.json();\n  }, []);\n\n  return useQuery<TCurrentlyPlayingTrack>(\n    [\"currently-playing\"],\n    async () => {\n      const fetchCurrentlyPlaying = async ({\n        accessToken,\n      }: {\n        accessToken: string;\n      }) => {\n        const response = await fetch(currentlyPlayingEndpoint, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        if (response.status === 204 || response.status > 400) {\n          return { is_playing: false };\n        }\n\n        return await response.json();\n      };\n\n      if (!accessToken) {\n        const { access_token } = await getAccessToken();\n        setAccessToken(access_token);\n\n        if (!access_token) {\n          throw new Error(\"Invalid access token\");\n        }\n\n        return fetchCurrentlyPlaying({ accessToken: access_token });\n      } else {\n        return fetchCurrentlyPlaying({ accessToken });\n      }\n    },\n    {\n      refetchInterval,\n      retry: false,\n    }\n  );\n};\n"],"mappings":"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","names":["accessToken"]}